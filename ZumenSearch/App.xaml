<Application x:Class="ZumenSearch.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ZumenSearch"
             xmlns:vms="clr-namespace:ZumenSearch.ViewModels"
             xmlns:common="clr-namespace:ZumenSearch.Common" xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Royale"
             StartupUri="Views\MainWindow.xaml"
             Startup="AppOnStartup">
    <Application.Resources>


        <ResourceDictionary>

            <!-- データコンテキスト -->
            <vms:MainViewModel x:Key="MainViewModel" />

            <!-- BooleanToVisibilityConverterの、 Collapsed 版　-->
            <common:BoolToVisibilityCollapsedConverter x:Key="BoolToVisibilityCollapsedConverter" TrueValue="Visible" FalseValue="Collapsed" />

            <!-- EnumToBoolConverter ラジオボタンとEnumのバインディング用 -->
            <common:EnumToBoolConverter x:Key="EnumBooleanConverter"/>

            <ResourceDictionary.MergedDictionaries>

                <!-- デフォルトテーマ 差し替え用 -->
                <ResourceDictionary Source="pack://application:,,,/Themes/DefaultTheme.xaml" x:Name="DefaultTheme"/>

                <!-- 基本 -->
                <ResourceDictionary>
                    
                    <Style TargetType="{x:Type Window}">
                        <Setter Property="FontWeight" Value="Normal"/>
                    </Style>

                    <Style TargetType="{x:Type TextBox}">
                        <Style.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3" />
                            </Style>
                        </Style.Resources>
                        <Setter Property="Padding" Value="3"/>
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>

                    <Style TargetType="{x:Type Button}">
                        <Style.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3" />
                            </Style>
                        </Style.Resources>
                        <Setter Property="Padding" Value="6"/>
                        <Setter Property="Margin" Value="6"/>
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>

                    <Style TargetType="{x:Type CheckBox}">
                        <Style.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="2" />
                            </Style>
                        </Style.Resources>
                        <Setter Property="Padding" Value="3"/>
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>

                    <Style x:Key="DefaultTextBlockStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>

                    <Style x:Key="DefaultRunStyle" TargetType="{x:Type Run}">
                        <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                        <Setter Property="FontStyle" Value="Normal" />
                    </Style>

                    <Style x:Key="DefaultLabelStyle" TargetType="{x:Type Label}">
                        <Setter Property="Foreground" Value="{DynamicResource ControlMediumColorBrush}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <Setter Property="Padding" Value="0" />
                    </Style>

                    <Style x:Key="TabMenuLabelStyle" TargetType="{x:Type Label}">
                        <Setter Property="Foreground" Value="{DynamicResource ControlMediumColorBrush}" />
                        <Setter Property="FontWeight" Value="Bold" />
                    </Style>

                    <Style x:Key="SectionTitle" TargetType="{x:Type Label}">
                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                        <Setter Property="FontWeight" Value="Bold" />
                        <Setter Property="Margin" Value="3 0 0 0" />
                    </Style>

                    <Style x:Key="ErrorInfoTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DefaultTextBlockStyle}">
                        <Setter Property="Foreground" Value="{DynamicResource WarningColorBrush}" />
                    </Style>

                    <Style x:Key="HyperlinkFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource ControlLightColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style TargetType="{x:Type Hyperlink}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource HyperlinkFocusVisual}"/>
                        <Setter Property="TextBlock.TextDecorations" Value="" />
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
                                <Setter Property="Foreground" Value="LightBlue" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="TextBlock.TextDecorations" Value="" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}">
                        <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Margin" Value="3 0 0 0" />
                        <Setter Property="FontStyle" Value="Normal" />
                    </Style>

                    <Style x:Key="SearchTextBoxStyle" TargetType="{x:Type TextBox}">
                        <Style.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3" />
                            </Style>
                        </Style.Resources>
                        <Setter Property="OverridesDefaultStyle" Value="False" />
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Padding" Value="6"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>

                        <Setter Property="FontWeight" Value="Normal" />
                        <!--
                        <Style.Triggers>
                            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                                <Setter Property="Background" Value="WhiteSmoke" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource NormalTextBoxBackgroundColorBrush}" />
                            </Trigger>
                        </Style.Triggers>
                        -->
                    </Style>

                    <Style x:Key="DefaultPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
                        <Setter Property="Margin" Value="1"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Background" Value="{DynamicResource NormalTextBoxBackgroundColorBrush}" />
                    </Style>

                    <Style x:Key="WindowMainPanelStyle" TargetType="{x:Type Border}">
                        <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}" />
                        <Setter Property="BorderThickness" Value="1" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                <Setter Property="BorderThickness" Value="0" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderInactiveBrush}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>

                    <!-- ボード・タイルのスタイル -->
                    <Style x:Key="BoardStyle" TargetType="Border">
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                        <Setter Property="Effect">
                            <Setter.Value>
                                <DropShadowEffect Color="{DynamicResource ShadowBoardColor}" Opacity="1" ShadowDepth="0.8" BlurRadius="3" Direction="315"/>
                            </Setter.Value>
                        </Setter>
                    </Style>


                    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
                    <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
                        <Setter Property="BorderBrush" Value="#D5DFE5"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="FontWeight" Value="Normal"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type GroupBox}">
                                    <Grid SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="6"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="6"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="6"/>
                                        </Grid.RowDefinitions>
                                        <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.Column="0" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1"/>
                                        <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1">
                                            <Border.OpacityMask>
                                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                                </MultiBinding>
                                            </Border.OpacityMask>
                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                                <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                                            </Border>
                                        </Border>
                                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.RowSpan="2" Grid.Row="0">
                                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Border>
                                        <ContentPresenter Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>


                </ResourceDictionary>

                <!-- Main menu -->
                <ResourceDictionary>
                    <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0"/>
                    <Style x:Key="MainMenuStyle" TargetType="{x:Type Menu}">
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
                        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
                        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
                        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Menu}">
                                    <Border VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>

                <!-- Main menu items -->
                <ResourceDictionary>
                    <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0"/>
                    <SolidColorBrush x:Key="Menu.Static.Border" Color="#FF999999"/>
                    <SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FF212121"/>
                    <SolidColorBrush x:Key="Menu.Static.Separator" Color="#FFD7D7D7"/>
                    <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070"/>
                    <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="#3D26A0DA"/>
                    <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="#FF26A0DA"/>
                    <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#3D26A0DA"/>
                    <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF26A0DA"/>
                    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="#0A000000"/>
                    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="#21000000"/>
                    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
                    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
                    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
                    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
                    <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
                    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
                        <Setter Property="ClickMode" Value="Hover"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border x:Name="templateRoot" Background="Transparent" BorderThickness="1" BorderBrush="Transparent" SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
                        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
                        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Border Grid.Column="0" Grid.Row="1">
                                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                                        </Border>
                                        <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
                                            <RepeatButton.Visibility>
                                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                </MultiBinding>
                                            </RepeatButton.Visibility>
                                            <Path Data="{StaticResource UpArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                                        </RepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
                                            <RepeatButton.Visibility>
                                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                </MultiBinding>
                                            </RepeatButton.Visibility>
                                            <Path Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                                        </RepeatButton>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <Grid VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                                <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsHighlighted" Value="True"/>
                                    <Condition Property="IsEnabled" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" VerticalAlignment="Center" Padding="0" Margin="0" Background="{DynamicResource BoardBackgroundColorBrush}" TextElement.Foreground="{DynamicResource ControlMediumColorBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="32"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{TemplateBinding Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>

                                <ContentPresenter ContentSource="Header" Grid.Column="1" VerticalAlignment="Stretch" Height="32" Margin="9 7 9 0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" PlacementTarget="{Binding ElementName=templateRoot}">
                                    <Border x:Name="SubMenuBorder" Background="{StaticResource Menu.Static.Background}" BorderThickness="0" BorderBrush="{StaticResource Menu.Static.Border}" Padding="2">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle Fill="{StaticResource Menu.Static.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                            </Trigger>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Menu.Static.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Menu.Static.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Static.Foreground}"/>
                                <Setter Property="Opacity" TargetName="templateRoot" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Height="22" SnapsToDevicePixels="true">
                            <Grid Margin="-1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="13"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="30"/>
                                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Border x:Name="GlyphPanel" Background="{StaticResource MenuItem.Selected.Background}" BorderThickness="1" BorderBrush="{StaticResource MenuItem.Selected.Border}" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                                    <Path x:Name="Glyph" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" Height="11" Width="10"/>
                                </Border>
                                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsHighlighted" Value="True"/>
                                    <Condition Property="IsEnabled" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Height="22" SnapsToDevicePixels="true">
                            <Grid Margin="-1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="13"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="30"/>
                                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Border x:Name="GlyphPanel" Background="{StaticResource MenuItem.Highlight.Background}" BorderThickness="1" BorderBrush="{StaticResource MenuItem.Highlight.Border}" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                                    <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" Height="11" Width="9"/>
                                </Border>
                                <ContentPresenter ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                                <Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{StaticResource Menu.Static.Foreground}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                                    <Border x:Name="SubMenuBorder" Background="{StaticResource Menu.Static.Background}" BorderThickness="1" BorderBrush="{StaticResource Menu.Static.Border}" Padding="2">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                            </Trigger>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <Style x:Key="MainMenuItemStyle" TargetType="{x:Type MenuItem}">
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                        <Style.Triggers>
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
                                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                <Setter Property="Padding" Value="0"/>
                            </Trigger>
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource Menu.Static.Border}"/>
                                <Setter Property="Foreground" Value="{StaticResource Menu.Static.Foreground}"/>
                                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                <Setter Property="Padding" Value="0"/>
                            </Trigger>
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>

                <!-- SystemButton -->
                <ResourceDictionary>

                    <Style x:Key="PathSysButton" TargetType="Button">
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="SnapsToDevicePixels" Value="true" />
                        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Opacity" Value="1" />
                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                        <Setter Property="Width" Value="46" />
                        <Setter Property="Height" Value="32" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="Border" TextBlock.Foreground="{DynamicResource ControlForegroundColorBrush}" Background="{TemplateBinding Background}" CornerRadius="0" BorderThickness="0">
                                        <Border.BorderBrush>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                                    </GradientStopCollection>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>

                                        <Viewbox Width="32" Height="32">
                                            <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Stroke="Transparent" StrokeThickness="0" Margin="13" RenderTransformOrigin="0.5,0.5">
                                                <Path.RenderTransform>
                                                    <TransformGroup>
                                                        <TransformGroup.Children>
                                                            <RotateTransform Angle="0" />
                                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                                        </TransformGroup.Children>
                                                    </TransformGroup>
                                                </Path.RenderTransform>
                                                <Path.Fill>
                                                    <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                </Path.Fill>
                                            </Path>
                                        </Viewbox>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">

                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlMouseOverBackgroundColorBrush}"></Setter>

                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                        </Trigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="False" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}">
                                                <!--
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource ControlMouseOverColor}" Offset="0.0" />
                                                                <GradientStop Color="{DynamicResource ControlDarkColor}" Offset="1.0" />
                                                            </GradientStopCollection>
                                                        </GradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                                -->
                                            </Setter>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}"/>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="true" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>

                                        </MultiTrigger>

                                    </ControlTemplate.Triggers>

                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- SystemButtonClose -->
                <ResourceDictionary>

                    <Style x:Key="PathSysButtonClose" TargetType="Button">
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="SnapsToDevicePixels" Value="true" />
                        <Setter Property="RenderOptions.EdgeMode" Value="Unspecified" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Opacity" Value="1" />
                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                        <Setter Property="Width" Value="46" />
                        <Setter Property="Height" Value="32" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="Border" TextBlock.Foreground="{DynamicResource ControlForegroundColorBrush}" Background="{TemplateBinding Background}" CornerRadius="0" BorderThickness="0">
                                        <Border.BorderBrush>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                                    </GradientStopCollection>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>

                                        <Viewbox Width="32" Height="32">
                                            <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Stroke="Transparent" StrokeThickness="0" Margin="13" RenderTransformOrigin="0.5,0.5">
                                                <Path.RenderTransform>
                                                    <TransformGroup>
                                                        <TransformGroup.Children>
                                                            <RotateTransform Angle="0" />
                                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                                        </TransformGroup.Children>
                                                    </TransformGroup>
                                                </Path.RenderTransform>
                                                <Path.Fill>
                                                    <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                </Path.Fill>
                                            </Path>
                                        </Viewbox>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <!-- ここの色を変えただけ -->
                                            <Setter TargetName="Border" Property="Background" Value="#E81123"></Setter>

                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                        </Trigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="False" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}">
                                                <!--
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource ControlMouseOverColor}" Offset="0.0" />
                                                                <GradientStop Color="{DynamicResource ControlDarkColor}" Offset="1.0" />
                                                            </GradientStopCollection>
                                                        </GradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                                -->
                                            </Setter>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}"/>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="true" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>

                                        </MultiTrigger>

                                    </ControlTemplate.Triggers>

                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- PathButton -->
                <ResourceDictionary>

                    <!-- FocusVisual -->
                    <Style x:Key="ButtonFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border>
                                        <Rectangle Margin="2" StrokeThickness="1" Stroke="{DynamicResource ControlMediumColorBrush}" StrokeDashArray="1 2" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="PathButton" TargetType="Button">
                        <Setter Property="SnapsToDevicePixels" Value="true" />
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="Foreground" Value="{DynamicResource ControlForegroundColorBrush}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="Border" TextBlock.Foreground="{DynamicResource ControlForegroundColorBrush}" CornerRadius="0" BorderThickness="0">
                                        <Border.BorderBrush>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0.0" />
                                                        <GradientStop Color="{DynamicResource BorderDarkColor}" Offset="1.0" />
                                                    </GradientStopCollection>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.BorderBrush>
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" Opacity="0">
                                                <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0" />
                                                <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1" />
                                            </LinearGradientBrush>
                                        </Border.Background>

                                        <Path x:Name="PathIcon" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Stroke="Transparent" StrokeThickness="0" Margin="6" RenderTransformOrigin="0.5,0.5">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <TransformGroup.Children>
                                                        <RotateTransform Angle="0" />
                                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                                    </TransformGroup.Children>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                            <Path.Fill>
                                                <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                            </Path.Fill>
                                        </Path>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <Trigger Property="IsDefault" Value="true">
                                            <Setter TargetName="Border" Property="BorderBrush">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource ControlDarkColor}" Offset="0.0" />
                                                                <GradientStop Color="{DynamicResource ControlDarkColor}" Offset="1.0" />
                                                            </GradientStopCollection>
                                                        </GradientBrush.GradientStops>
                                                    </LinearGradientBrush>

                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                        </Trigger>

                                        <Trigger Property="IsMouseOver" Value="true">
                                            <!--
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlMouseOverBackgroundColorBrush}"></Setter>
                                            -->
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                        </Trigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="False" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}">
                                                <!--
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientBrush.GradientStops>
                                                            <GradientStopCollection>
                                                                <GradientStop Color="{DynamicResource ControlMouseOverColor}" Offset="0.0" />
                                                                <GradientStop Color="{DynamicResource ControlDarkColor}" Offset="1.0" />
                                                            </GradientStopCollection>
                                                        </GradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                                -->
                                            </Setter>
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}"/>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsPressed" Value="true" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>

                                        </MultiTrigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- ListView -->
                <ResourceDictionary>

                    <Style x:Key="GridViewColumnHeaderGripperStyle" TargetType="Thumb">
                        <Setter Property="OverridesDefaultStyle" Value="False"/>
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0,0.5" Opacity="0.4">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Offset="0.0" Color="#121212" />
                                            <GradientStop Offset="1.0" Color="#121212" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border Background="Transparent">
                                        <Rectangle HorizontalAlignment="Center" Width="2" Fill="{TemplateBinding Background}" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="GridViewColumnHeaderStyle" TargetType="GridViewColumnHeader">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Height" Value="27" />
                        <Setter Property="Margin" Value="-2 1 0 0" />
                        <Setter Property="Padding" Value="0 0 0 0" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="TextElement.FontWeight" Value="Normal" />
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource ControlLightColorBrush}" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="GridViewColumnHeader">
                                    <Grid>
                                        <Border Name="HeaderBorder" Padding="12 0 0 0" BorderBrush="#121212" BorderThickness="0,0,0,0.5" Background="{TemplateBinding Background}">
                                            <ContentPresenter Name="HeaderContent" Margin="0,0,0,4" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                        <!-- disable colum header resize by removing this. -->
                                        <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripperStyle}" HorizontalAlignment="Right" Margin="0,0,0,0" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsPressed" Value="true">
                                            <!-- ヘッダークリック可の場合
                                            <Setter TargetName="HeaderContent" Property="Margin" Value="0,1,0,0" />
                                            -->
                                            <Setter TargetName="HeaderContent" Property="Margin" Value="0,0,0,4" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <!-- ヘッダークリック可の場合
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="white" />
                                            -->
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="HeaderBorder" Property="Opacity" Value=".5" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Role" Value="Floating">
                                <Setter Property="Opacity" Value="0.7" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GridViewColumnHeader">
                                            <Canvas Name="PART_FloatingHeaderCanvas">
                                                <Rectangle Fill="#60000000" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"/>
                                            </Canvas>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="Role" Value="Padding">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GridViewColumnHeader">
                                            <Border Name="HeaderBorder" BorderThickness="0,1,0,1" BorderBrush="Transparent" Background="Transparent"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <!-- ヘッダークリック可の場合  -->
                    <Style x:Key="GridViewColumnHeaderClickStyle" TargetType="GridViewColumnHeader">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Height" Value="28" />
                        <Setter Property="Margin" Value="-2 1 0 0" />
                        <Setter Property="Padding" Value="0 0 0 0" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="TextElement.FontWeight" Value="Normal" />
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource ControlForegroundColorBrush}" />
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="GridViewColumnHeader">
                                    <Grid>
                                        <Border Name="HeaderBorder" Padding="12 0 0 0" BorderBrush="#121212" BorderThickness="0,0,0,0.5" Background="{TemplateBinding Background}">
                                            <ContentPresenter Name="HeaderContent" Margin="0,0,0,1" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>
                                        <!-- disable colum header resize by removing this. -->
                                        <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripperStyle}" HorizontalAlignment="Right" Margin="0,0,0,0" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsPressed" Value="true">

                                            <Setter TargetName="HeaderContent" Property="Margin" Value="0,1,0,0" />
                                            <!-- ヘッダークリック不可の場合
                                            <Setter TargetName="HeaderContent" Property="Margin" Value="0,0,0,4" />
                                            -->
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <!--
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="#444" />
                                            -->
                                            <Setter TargetName="HeaderContent" Property="TextElement.Foreground" Value="{DynamicResource ControlLightColorBrush}" />
                                            <!-- ヘッダークリック可の場合削除
                                            -->
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="HeaderBorder" Property="Opacity" Value=".5" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Role" Value="Floating">
                                <Setter Property="Opacity" Value="0.7" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GridViewColumnHeader">
                                            <Canvas Name="PART_FloatingHeaderCanvas">
                                                <Rectangle Fill="#60000000" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"/>
                                            </Canvas>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="Role" Value="Padding">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GridViewColumnHeader">
                                            <Border Name="HeaderBorder" BorderThickness="0,1,0,1" BorderBrush="Transparent" Background="Transparent"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style x:Key="ThumbStyle" TargetType="{x:Type Thumb}">
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="IsTabStop" Value="false" />
                        <Setter Property="Focusable" Value="false" />
                        <Setter Property="Padding" Value="0,0,0,0" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ScrollBarBorderBrush}" />
                        <Setter Property="Background" Value="{DynamicResource ScrollBarColorBrush}" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border x:Name="Border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames  Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Border" >
                                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <!--
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Border">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#282828" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        -->
                                                        <DoubleAnimationUsingKeyFrames  Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Border" >
                                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" Duration="00:00:00.1" To="0.3"/>
                                                        <!--
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Border">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#212121" />
                                                        </ColorAnimationUsingKeyFrames>
                                                        -->
                                                    </Storyboard>
                                                </VisualState>
                                                <!--
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="Border">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#212121" />
                                                        </ColorAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                -->
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                    </Border>
                                    <!--
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ScrollBarMouseOverColorBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ScrollBarDisabledBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                    -->
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="RepeatButtonStyleInc" TargetType="{x:Type RepeatButton}">
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Margin" Value="0,0,0,0" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="IsTabStop" Value="false" />
                        <Setter Property="Focusable" Value="false" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border x:Name="Border" Margin="0" CornerRadius="0" BorderThickness="0">
                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" >
                                        </Path>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ScrollBarPressedBrush}" />
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ScrollBarDisabledBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="RepeatButtonStyleDec" TargetType="{x:Type RepeatButton}">
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Margin" Value="0,0,0,0" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="IsTabStop" Value="false" />
                        <Setter Property="Focusable" Value="false" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border x:Name="Border" Margin="0" CornerRadius="0" BorderThickness="0">
                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource ControlForegroundColorBrush}" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" >
                                        </Path>
                                    </Border>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ScrollBarPressedBrush}" />
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ScrollBarDisabledBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="ScrollBarTrackStyle" TargetType="{x:Type RepeatButton}">
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <Border Background="Transparent"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18" />
                                <RowDefinition Height="0.00001*" />
                                <RowDefinition MaxHeight="18" />
                            </Grid.RowDefinitions>
                            <Border Grid.RowSpan="3" CornerRadius="0" Background="Transparent" />

                            <RepeatButton Grid.Row="0" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Style="{StaticResource RepeatButtonStyleInc}" IsTabStop="False"/>
                            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarTrackStyle}" Focusable="False" Background="Transparent" IsTabStop="False"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ThumbStyle}" Margin="4,0,4,0"></Thumb>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarTrackStyle}" Focusable="False" Background="Transparent" IsTabStop="False"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                            <RepeatButton Grid.Row="2" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Style="{StaticResource RepeatButtonStyleDec}" IsTabStop="False"/>
                        </Grid>
                    </ControlTemplate>

                    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="18" />
                                <ColumnDefinition Width="0.00001*" />
                                <ColumnDefinition MaxWidth="18" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.ColumnSpan="3" CornerRadius="0" Background="Transparent" />

                            <RepeatButton Grid.Column="0" Style="{StaticResource RepeatButtonStyleInc}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" IsTabStop="False" />
                            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarTrackStyle}" Focusable="False" Background="Transparent" IsTabStop="False" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ThumbStyle}" Margin="0,4,0,4"></Thumb>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarTrackStyle}" Focusable="False" Background="Transparent" IsTabStop="False" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                            <RepeatButton Grid.Column="2" Style="{StaticResource RepeatButtonStyleDec}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" IsTabStop="False" />
                        </Grid>
                    </ControlTemplate>

                    <Style x:Key="ListviewFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border>
                                        <Rectangle Margin="2" StrokeThickness="1" Stroke="#CCCCCC" StrokeDashArray="1 2" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="ListViewItemStyle" TargetType="ListViewItem">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource ListviewFocusVisual}"/>
                        <Setter Property="Background" Value="{DynamicResource ItemBackgroundColorBrush}"/>
                        <!--
                        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
                        -->
                        <Setter Property="Foreground" Value="{DynamicResource ItemForegroundColorBrush}"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                        <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                <Setter Property="Background" Value="{DynamicResource ItemBackgroundAlt0ColorBrush}" />
                            </Trigger>
                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                <Setter Property="Background" Value="{DynamicResource ItemBackgroundAlt1ColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource ItemMouseOverForegroundColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ItemSelectedBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ItemSelectedForegroundColorBrush}" />
                                <Setter Property="TextElement.FontWeight" Value="Bold"/>
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsFocused" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource ItemSelectedNoneFocusedBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ItemSelectedForegroundColorBrush}" />
                                <Setter Property="TextElement.FontWeight" Value="Bold"/>
                            </MultiTrigger>

                        </Style.Triggers>
                    </Style>
                    <!-- AlternateIndexを使わない場合  -->
                    <Style x:Key="ListViewItemNoAlternateStyle" TargetType="ListViewItem">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource ListviewFocusVisual}"/>
                        <Setter Property="Background" Value="{DynamicResource ItemBackgroundColorBrush}"/>
                        <!--
                        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
                        -->
                        <Setter Property="Foreground" Value="{DynamicResource ItemForegroundColorBrush}"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border Name="Border" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" CornerRadius="0" SnapsToDevicePixels="true">
                                        <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource ItemMouseOverForegroundColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ItemSelectedBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ItemSelectedForegroundColorBrush}" />
                                <Setter Property="TextElement.FontWeight" Value="Bold"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsFocused" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource ItemSelectedNoneFocusedBackgroundColorBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource ItemSelectedForegroundColorBrush}" />
                                <Setter Property="TextElement.FontWeight" Value="Bold"/>
                            </MultiTrigger>
                        </Style.Triggers>
                    </Style>

                </ResourceDictionary>

                <!-- RadioButton -->
                <ResourceDictionary>

                    <Style x:Key="RadioButtonFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="4 2 2 2" SnapsToDevicePixels="true" Stroke="{DynamicResource ControlMediumColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="RadioButtonOptionMarkFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource ControlMediumColorBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="SelectionRadioButtonStyle" TargetType="{x:Type RadioButton}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Gainsboro"/>
                        <Setter Property="Foreground" Value="{StaticResource ControlForegroundColorBrush}"/>
                        <Setter Property="BorderThickness" Value="0.2"/>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RadioButton}">
                                    <Grid x:Name="templateRoot" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0 0 0 0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        
                                        <Border x:Name="radioButtonContentBorder" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="{TemplateBinding Padding}" CornerRadius="3">
                                            <ContentPresenter x:Name="contentPresenter" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Stretch"/>
                                        </Border>

                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="HasContent" Value="true">
                                            <Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Foreground" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                            <Setter Property="TextElement.FontWeight" Value="Bold"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="true">
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="Background" TargetName="radioButtonContentBorder" Value="{DynamicResource RadioButtonCheckedBackgroundColorBrush}"/>
                                            <Setter Property="BorderBrush" Value="#212121"/>
                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}"/>
                                            <Setter Property="TextElement.FontWeight" Value="Bold"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="false">
                                            <Setter Property="Background" TargetName="radioButtonContentBorder" Value="{DynamicResource RadioButtonUnCheckedBackgroundColorBrush}"/>
                                            <Setter Property="TextElement.FontWeight" Value="Normal"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="{x:Null}">
                                            <Setter Property="Background" TargetName="radioButtonContentBorder" Value="Gainsboro"/>
                                            <Setter Property="BorderBrush" Value="Gainsboro"/>
                                            <Setter Property="Foreground" Value="#CCC"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- NoChrome TabControl -->
                <ResourceDictionary>

                    <Style x:Key="NoChromeTabFocusVisualStyle">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="NoChromeTabControl" TargetType="{x:Type TabControl}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabControl}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <TabPanel Grid.Row="0" x:Name="HeaderPanel" HorizontalAlignment="Center" IsItemsHost="True" Margin="0 0 0 0"/>
                                        <Border Grid.Row="1" x:Name="Border" BorderThickness="0 0.5 0 0" BorderBrush="DimGray" Margin="0">
                                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="0" ContentSource="SelectedContent" RecognizesAccessKey="True"/>
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="NoChromeTabHeader" TargetType="{x:Type TabItem}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource NoChromeTabFocusVisualStyle}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TabItem">
                                    <Grid Name="Panel">
                                        <Border Name="Border" BorderThickness="0 0 0 2" BorderBrush="Transparent" Margin="0 0 0 0" Background="{DynamicResource BoardBackgroundColorBrush}">
                                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" Margin="4"/>
                                        </Border>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>
                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}"/>
                                            <Setter TargetName="ContentSite" Property="TextElement.FontWeight" Value="Bold" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="False">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}"/>
                                            <Setter TargetName="ContentSite" Property="TextElement.FontWeight" Value="Bold" />
                                            <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- Hiddlen TabControl -->
                <ResourceDictionary>

                    <Style x:Key="HiddlenTabControl" TargetType="{x:Type TabControl}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabControl}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <TabPanel Grid.Row="0" x:Name="HeaderPanel" HorizontalAlignment="Center" IsItemsHost="True" Margin="0 0 0 0" Visibility="Collapsed"/>

                                        <ContentPresenter Grid.Row="1" x:Name="PART_SelectedContentHost" Margin="0" ContentSource="SelectedContent" RecognizesAccessKey="True"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="HiddlenTabHeaderCollapsed" TargetType="{x:Type TabItem}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </Style>

                </ResourceDictionary>

                <!-- Top Menu TabControl -->
                <ResourceDictionary>

                    <Style x:Key="TopMenuTabFocusVisualStyle">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="TopMenuTabItemStyle" TargetType="{x:Type TabItem}">
                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                        <Setter Property="BorderThickness" Value="0 0 0 4" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Width" Value="150" />
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="FocusVisualStyle" Value="{StaticResource TopMenuTabFocusVisualStyle}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabItem}">
                                    <Border Name="Border" BorderBrush="Transparent">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <Border Name="HeaderBorder" Grid.Row="0" VerticalAlignment="Center" Margin="{TemplateBinding Margin}" BorderThickness="0 0 0 4" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                <ContentPresenter x:Name="ContentSite" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="False" />
                                                <Condition Property="IsMouseOver" Value="False" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="Transparent" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />

                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="False" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="Gray" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="True" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </MultiTrigger>

                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                            <Setter Property="FontWeight" Value="SemiBold" />
                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="TopMenuTabControlStyle" TargetType="{x:Type TabControl}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabControl}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <TabPanel Grid.Row="0" Grid.Column="0" x:Name="HeaderPanel" HorizontalAlignment="Center" IsItemsHost="True" Margin="0 0 0 0"  Background="{DynamicResource BoardBackgroundColorBrush}"/>
                                        <Border Grid.Row="1" Grid.Column="1" x:Name="Border" BorderThickness="0" Margin="0" Background="{DynamicResource BoardBackgroundColorBrush}">
                                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="0" ContentSource="SelectedContent" RecognizesAccessKey="True"/>
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- Left Menu TabControl -->
                <ResourceDictionary>

                    <Style x:Key="LeftMenuTabFocusVisualStyle">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="1" StrokeThickness="1" StrokeDashArray="1 2" Stroke="{DynamicResource ControlMediumColorBrush}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="LeftMenuTabItemStyle" TargetType="{x:Type TabItem}">
                        <Setter Property="Foreground" Value="{DynamicResource TitleTextColorBrush}" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}"/>
                        <Setter Property="BorderThickness" Value="4 0 0 0" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="Width" Value="320" />
                        <Setter Property="Height" Value="Auto" />
                        <Setter Property="Padding" Value="8" />
                        <Setter Property="FocusVisualStyle" Value="{StaticResource LeftMenuTabFocusVisualStyle}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabItem}">
                                    <Border Name="Border" BorderBrush="Transparent">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <Border Name="HeaderBorder" Grid.Row="0" VerticalAlignment="Center" Margin="{TemplateBinding Margin}" BorderThickness="4 0 0 0" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                                <ContentPresenter x:Name="ContentSite" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="False" />
                                                <Condition Property="IsMouseOver" Value="False" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="Transparent" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />

                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="False" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="Gray" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </MultiTrigger>

                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="True" />
                                                <Condition Property="IsMouseOver" Value="True" />
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource WindowBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </MultiTrigger>

                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource WindowBackgroundColorBrush}" />
                                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                            <Setter Property="Foreground" Value="{DynamicResource NormalTextColorBrush}" />
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="LeftMenuTabControlStyle" TargetType="{x:Type TabControl}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabControl}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <TabPanel Grid.Row="0" Grid.Column="0" x:Name="HeaderPanel" HorizontalAlignment="Left" IsItemsHost="True" Margin="0 0 0 0"  Background="{DynamicResource BoardBackgroundColorBrush}"/>
                                        <Border Grid.Row="0" Grid.Column="1" x:Name="Border" BorderThickness="0" Margin="0" Background="{DynamicResource WindowBackgroundColorBrush}">
                                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="0" ContentSource="SelectedContent" RecognizesAccessKey="True"/>
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- Default Round Corner TabControl -->
                <ResourceDictionary>

                    <Style x:Key="DefaultTabItemFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#F0F0F0" Offset="0.0"/>
                        <GradientStop Color="#E5E5E5" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
                    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#ECF4FC" Offset="0.0"/>
                        <GradientStop Color="#DCECFC" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
                    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
                    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
                    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
                    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
                    <Style x:Key="DefaultTabItem" TargetType="{x:Type TabItem}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource DefaultTabItemFocusVisual}"/>
                        <Setter Property="Foreground" Value="Black"/>
                        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Padding" Value="6,2,6,2"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabItem}">
                                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                        <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderThickness="1,1,1,0" BorderBrush="{TemplateBinding BorderBrush}" Margin="0" CornerRadius="3, 3, 0, 0">
                                            <Border x:Name="innerBorder" Background="{StaticResource TabItem.Selected.Background}" BorderThickness="1,1,1,0" BorderBrush="{StaticResource TabItem.Selected.Border}" Margin="-1" Opacity="0" CornerRadius="3, 3, 0, 0"/>
                                        </Border>
                                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>

                <!-- Default Round Corner ComboBox -->
                <ResourceDictionary>
                    <Style x:Key="ComboBoxFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
                    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
                        <Setter Property="OverridesDefaultStyle" Value="true"/>
                        <Setter Property="AllowDrop" Value="true"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="MinHeight" Value="0"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Grid>
                                        <Border CornerRadius="3,0,0,3" BorderThickness="1,1,0,1" Background="{TemplateBinding Background}" BorderBrush="Black">
                                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
                        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
                    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
                    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
                    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
                    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
                    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
                    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
                        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
                    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
                    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
                    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
                    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
                        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
                    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
                        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
                    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
                    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
                    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
                    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
                        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
                    </LinearGradientBrush>
                    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
                    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
                    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="true"/>
                        <Setter Property="IsTabStop" Value="false"/>
                        <Setter Property="Focusable" Value="false"/>
                        <Setter Property="ClickMode" Value="Press"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}" SnapsToDevicePixels="true" CornerRadius="3">
                                        <Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                        </Border>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                                        </MultiDataTrigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                                        </MultiDataTrigger>
                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                                        </MultiDataTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                                        </Trigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                                        </MultiDataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </theme:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                            <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                                <Setter Property="Foreground" Value="Black"/>
                            </Trigger>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" CornerRadius="3">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </theme:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                    <Style TargetType="{x:Type ComboBox}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
                        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="Padding" Value="3"/>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
                        <Style.Triggers>
                            <Trigger Property="IsEditable" Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter Property="Padding" Value="2"/>
                                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>

                <!-- GridSplitter -->
                <ResourceDictionary>

                    <ControlTemplate x:Key="VerticalSplitter" TargetType="{x:Type GridSplitter}">
                        <Grid>
                            <Path Data="M9,3H11V5H9V3M13,3H15V5H13V3M9,7H11V9H9V7M13,7H15V9H13V7M9,11H11V13H9V11M13,11H15V13H13V11M9,15H11V17H9V15M13,15H15V17H13V15M9,19H11V21H9V19M13,19H15V21H13V19Z"
                                                  Fill="Gray"
                                              Stretch="Uniform"
                                              Width="16"
                                              Height="16"
                                            Stroke="Transparent"
                                            StrokeThickness="1"
                                              RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <RotateTransform Angle="0" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Rectangle Fill="#00FFFFFF" />
                        </Grid>
                    </ControlTemplate>

                    <ControlTemplate x:Key="HolizontalSplitter" TargetType="{x:Type GridSplitter}">
                        <Grid>
                            <Path Data="M3,15V13H5V15H3M3,11V9H5V11H3M7,15V13H9V15H7M7,11V9H9V11H7M11,15V13H13V15H11M11,11V9H13V11H11M15,15V13H17V15H15M15,11V9H17V11H15M19,15V13H21V15H19M19,11V9H21V11H19Z"
                                                  Fill="Gray"
                                              Stretch="Uniform"
                                              Width="16"
                                              Height="16"
                                            Stroke="Transparent"
                                            StrokeThickness="1"
                                  Margin="4 0 0 0"
                                              RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <RotateTransform Angle="0" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <Rectangle Fill="#00FFFFFF"/>
                        </Grid>
                    </ControlTemplate>

                    <!-- FocusVisual -->
                    <Style x:Key="GridSplitterFocusVisual">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Border>
                                        <Rectangle Margin="2"
                     StrokeThickness="1"
                     Stroke="#CCCCCC"
                     StrokeDashArray="1 2" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
                        <Setter Property="FocusVisualStyle" Value="{StaticResource GridSplitterFocusVisual}"/>
                        <Setter Property="Template" Value="{StaticResource VerticalSplitter}"/>
                        <Style.Triggers>
                            <Trigger Property="ResizeDirection" Value="Rows">
                                <Setter Property="Height" Value="8" />
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="Template" Value="{StaticResource HolizontalSplitter}" />
                            </Trigger>
                            <Trigger Property="ResizeDirection" Value="Columns">
                                <Setter Property="Width" Value="8" />
                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                <Setter Property="Template" Value="{StaticResource VerticalSplitter}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>

                <!-- ListviewMenuButton -->
                <ResourceDictionary>

                    <Style x:Key="ListviewMenuButton" TargetType="{x:Type Button}">
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="Background" Value="{DynamicResource BoardBackgroundColorBrush}" />
                        <Setter Property="Foreground" Value="{DynamicResource ControlMediumColorBrush}"/>
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="BorderBrush" Value="#ccc" />
                        <Setter Property="Margin" Value="12 3 6 3" />
                        <Setter Property="Padding" Value="3" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="Border" Background="{TemplateBinding Background}">
                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                            <Viewbox Width="12" Height="12" Margin="0">
                                                <Canvas Width="24" Height="24">
                                                    <Canvas.RenderTransform>
                                                        <TranslateTransform X="1" Y="3"/>
                                                    </Canvas.RenderTransform>
                                                    <Path x:Name="PathIcon" Data="M5.12,5L5.93,4H17.93L18.87,5M12,17.5L6.5,12H10V10H14V12H17.5L12,17.5M20.54,5.23L19.15,3.55C18.88,3.21 18.47,3 18,3H6C5.53,3 5.12,3.21 4.84,3.55L3.46,5.23C3.17,5.57 3,6 3,6.5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V6.5C21,6 20.83,5.57 20.54,5.23Z" Stretch="Uniform">
                                                        <Path.Fill>
                                                            <SolidColorBrush x:Name="PathIconColor" Color="{DynamicResource ControlForegroundColor}"/>
                                                        </Path.Fill>
                                                        <Path.RenderTransform>
                                                            <TransformGroup>
                                                                <TransformGroup.Children>
                                                                    <RotateTransform Angle="0" />
                                                                    <ScaleTransform ScaleX="1.18" ScaleY="1.18" />
                                                                </TransformGroup.Children>
                                                            </TransformGroup>
                                                        </Path.RenderTransform>
                                                    </Path>
                                                </Canvas>
                                            </Viewbox>
                                            <TextBlock x:Name="ButtonText" Margin="6 0 0 0" Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"></TextBlock>
                                        </StackPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>

                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                            <Setter TargetName="ButtonText" Property="TextElement.Foreground" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                        </Trigger>

                                        <Trigger Property="IsPressed" Value="true">
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource ControlPressedColorBrush}"/>
                                            <Setter TargetName="ButtonText" Property="TextElement.Foreground" Value="{DynamicResource ControlPressedColorBrush}"/>
                                        </Trigger>

                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter TargetName="PathIcon" Property="Fill" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                            <Setter TargetName="ButtonText" Property="TextElement.Foreground" Value="{DynamicResource DisabledForegroundColorBrush}"/>
                                        </Trigger>

                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>

                <!-- Flat ComboBox -->
                <ResourceDictionary>

                    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="Transparent" />
                    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="Transparent" />
                    <SolidColorBrush x:Key="ComboBoxPullDownMenuBackgroundBrush" Color="#333" />
                    <SolidColorBrush x:Key="ComboBoxPullDownMenuBorderBrush" Color="Gray" />
                    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
                    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
                    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />

                    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="18" />
                            </Grid.ColumnDefinitions>
                            <Border Name="Border" Grid.ColumnSpan="2" BorderBrush="Gray" CornerRadius="0" BorderThickness="0" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
                            <Border Name="ButtonBorder" Grid.Column="1" CornerRadius="0" BorderThickness="0 0 0 0" BorderBrush="Transparent" Margin="1 1 1 0" Background="{StaticResource ComboBoxNormalBackgroundBrush}" >
                                <Path Name="Arrow" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" HorizontalAlignment="Center" Fill="Gray" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="Transparent"/>
                                <Setter Property="Shape.Fill" TargetName="Arrow" Value="WhiteSmoke"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="Transparent"/>
                                <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Transparent"/>
                                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="Panel.Background" TargetName="Border" Value="Transparent"/>
                                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="Transparent"/>
                                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                                <Setter Property="Shape.Fill" TargetName="Arrow" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
                        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
                        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
                        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource ControlMediumColorBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ControlMediumColorBrush}"/>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ComboBox">
                                    <Grid Background="{TemplateBinding Background}">
                                        <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Template="{StaticResource ComboBoxToggleButtonTemplate}" />

                                        <ContentPresenter Name="ContentSite" Margin="0, 0, 23, 0" IsHitTestVisible="False" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                                        <TextBox Name="PART_EditableTextBox" Margin="0, 0, 23, 0" Visibility="Hidden" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" Focusable="True" >
                                            <TextBox.Template>
                                                <ControlTemplate TargetType="TextBox" >
                                                    <Border Name="PART_ContentHost" Focusable="False" />
                                                </ControlTemplate>
                                            </TextBox.Template>
                                        </TextBox>

                                        <TextBlock x:Name="SelectMessage" HorizontalAlignment="Center" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"  Visibility="Collapsed" IsHitTestVisible="False" TextElement.Foreground="White" />

                                        <!-- Popup showing items -->
                                        <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide" Margin="0">
                                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                                <Border Name="DropDownBorder" Background="{DynamicResource ComboBoxPullDownMenuBackgroundBrush}" Margin="0, 0, 0, 0" CornerRadius="0" BorderThickness="0" BorderBrush="{DynamicResource ComboBoxPullDownMenuBorderBrush}"/>
                                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                                </ScrollViewer>
                                            </Grid>
                                        </Popup>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ItemsControl.HasItems" Value="False">
                                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                                        </Trigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="False">
                                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                                        </Trigger>
                                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                                        </Trigger>
                                        <Trigger Property="ComboBox.IsEditable" Value="True">
                                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="SelectedItem" Value="{x:Null}">
                                            <Setter Property="Visibility" TargetName="SelectMessage" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="TextElement.Foreground" TargetName="SelectMessage" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                            <Setter Property="TextElement.Foreground" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource ControlMouseOverColorBrush}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ResourceDictionary>


            </ResourceDictionary.MergedDictionaries>

        </ResourceDictionary>
    </Application.Resources>
</Application>
